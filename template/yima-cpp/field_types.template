# 基本类型字段序列化模板
# 整数类型 (int8, int16, int32, int64)
[INT_SERIALIZE]
map.insert(QLatin1String("{{FIELD_NAME}}"), QCborValue({{GETTER_NAME}}()));

[INT_DESERIALIZE]
{{SETTER_NAME}}(static_cast<{{FIELD_TYPE_MAPPED}}>(map.value(QLatin1String("{{FIELD_NAME}}")).toInteger()));

# 浮点类型 (float32, float64)
[FLOAT_SERIALIZE]
map.insert(QLatin1String("{{FIELD_NAME}}"), QCborValue({{GETTER_NAME}}()));

[FLOAT_DESERIALIZE]
{{SETTER_NAME}}(static_cast<{{FIELD_TYPE_MAPPED}}>(map.value(QLatin1String("{{FIELD_NAME}}")).toDouble()));

# 字符串类型 (string)
[STRING_SERIALIZE]
map.insert(QLatin1String("{{FIELD_NAME}}"), QCborValue({{GETTER_NAME}}()));

[STRING_DESERIALIZE]
{{SETTER_NAME}}(map.value(QLatin1String("{{FIELD_NAME}}")).toString());

# 布尔类型 (bool)
[BOOL_SERIALIZE]
map.insert(QLatin1String("{{FIELD_NAME}}"), QCborValue({{GETTER_NAME}}()));

[BOOL_DESERIALIZE]
{{SETTER_NAME}}(map.value(QLatin1String("{{FIELD_NAME}}")).toBool());

# 二进制数据类型 (bytes)
[BYTES_SERIALIZE]
map.insert(QLatin1String("{{FIELD_NAME}}"), QCborValue({{GETTER_NAME}}()));

[BYTES_DESERIALIZE]
{{SETTER_NAME}}(map.value(QLatin1String("{{FIELD_NAME}}")).toByteArray());

# 复合类型字段序列化模板
[COMPLEX_SERIALIZE]
map.insert(QLatin1String("{{FIELD_NAME}}"), {{GETTER_NAME}}().toCbor());

[COMPLEX_DESERIALIZE]
{{FIELD_TYPE_MAPPED}} {{FIELD_NAME}};
{{FIELD_NAME}}.fromCbor(map.value(QLatin1String("{{FIELD_NAME}}")));
{{SETTER_NAME}}({{FIELD_NAME}});

# 数组类型字段序列化模板
[ARRAY_SERIALIZE]
QCborArray {{FIELD_NAME}}Array;
for (const auto& item : {{GETTER_NAME}}()) {
    {{FIELD_NAME}}Array.append(item.toCbor());
}
map.insert(QLatin1String("{{FIELD_NAME}}"), {{FIELD_NAME}}Array);

[ARRAY_DESERIALIZE]
QCborArray {{FIELD_NAME}}Array = map.value(QLatin1String("{{FIELD_NAME}}")).toArray();
QVector<{{ITEM_TYPE}}> {{FIELD_NAME}};
for (const auto& itemValue : {{FIELD_NAME}}Array) {
    {{ITEM_TYPE}} item;
    item.fromCbor(itemValue);
    {{FIELD_NAME}}.append(item);
}
{{SETTER_NAME}}({{FIELD_NAME}});

# 基本类型数组序列化模板
[BASIC_ARRAY_SERIALIZE]
QCborArray {{FIELD_NAME}}Array;
for (const auto& item : {{GETTER_NAME}}()) {
    {{FIELD_NAME}}Array.append(QCborValue(item));
}
map.insert(QLatin1String("{{FIELD_NAME}}"), {{FIELD_NAME}}Array);

[BASIC_ARRAY_DESERIALIZE]
QCborArray {{FIELD_NAME}}Array = map.value(QLatin1String("{{FIELD_NAME}}")).toArray();
QVector<{{ITEM_TYPE}}> {{FIELD_NAME}};
for (const auto& itemValue : {{FIELD_NAME}}Array) {
    {{FIELD_NAME}}.append(static_cast<{{ITEM_TYPE}}>(itemValue.to{{CONVERT_METHOD}}()));
}
{{SETTER_NAME}}({{FIELD_NAME}});

# 映射类型字段序列化模板
[MAP_SERIALIZE]
QCborMap {{FIELD_NAME}}Map;
for (auto it = {{GETTER_NAME}}().constBegin(); it != {{GETTER_NAME}}().constEnd(); ++it) {
    {{FIELD_NAME}}Map.insert(QLatin1String(it.key().toUtf8().constData()), it.value().toCbor());
}
map.insert(QLatin1String("{{FIELD_NAME}}"), {{FIELD_NAME}}Map);

[MAP_DESERIALIZE]
QCborMap {{FIELD_NAME}}Map = map.value(QLatin1String("{{FIELD_NAME}}")).toMap();
QMap<QString, {{VALUE_TYPE}}> {{FIELD_NAME}};
for (auto it = {{FIELD_NAME}}Map.constBegin(); it != {{FIELD_NAME}}Map.constEnd(); ++it) {
    {{VALUE_TYPE}} value;
    value.fromCbor(it.value());
    {{FIELD_NAME}}.insert(QString::fromUtf8(it.key().toUtf8()), value);
}
{{SETTER_NAME}}({{FIELD_NAME}});

# 可选类型字段序列化模板
[OPTIONAL_SERIALIZE]
if (has{{FIELD_NAME_PASCAL}}()) {
    map.insert(QLatin1String("{{FIELD_NAME}}"), {{GETTER_NAME}}().toCbor());
}

[OPTIONAL_DESERIALIZE]
if (map.contains(QLatin1String("{{FIELD_NAME}}"))) {
    {{FIELD_TYPE_MAPPED}} {{FIELD_NAME}};
    {{FIELD_NAME}}.fromCbor(map.value(QLatin1String("{{FIELD_NAME}}")));
    {{SETTER_NAME}}({{FIELD_NAME}});
} else {
    clear{{FIELD_NAME_PASCAL}}();
}

# 枚举类型字段序列化模板
[ENUM_SERIALIZE]
map.insert(QLatin1String("{{FIELD_NAME}}"), QCborValue(static_cast<int>({{GETTER_NAME}}())));

[ENUM_DESERIALIZE]
{{SETTER_NAME}}(static_cast<{{FIELD_TYPE_MAPPED}}>(map.value(QLatin1String("{{FIELD_NAME}}")).toInteger()));
