<%misc struct%>
// <%=declaration.name%>结构体 - STRUCT MISC CALLED
class MODEL_EXPORT <%=declaration.class_name%> {
public:
    <%=declaration.class_name%>() = default;
    
    // TODO: 基本实现
private:
    // TODO: 字段
};
<%endmisc%>

<%misc block%>
// <%=declaration.name%>块定义 - BLOCK MISC CALLED
class MODEL_EXPORT <%=declaration.class_name%> : <%call inheritance_declaration%> {
public:
    <%=declaration.class_name%>() = default;
    <%call constructor%>
    
    // 实现<%call interface_name%>接口
    QCborValue toCbor() const override {
        QCborMap map;
<%call serialize_fields%>
        return map;
    }
    
    void fromCbor(const QCborValue& cbor) override {
        QCborMap map = cbor.toMap();
<%call deserialize_fields%>
    }
    
    QStringList fields() const override {
        return QStringList{<%call field_names%>};
    }
    
    QString fieldOriginTypeName(const QString& fieldName) const override {
<%call field_type_logic%>
    }
    
    QList<QSharedPointer<IAnnotation>> annotations() const override {
<%call model_annotation_logic%>
    }
    
    QList<QSharedPointer<IAnnotation>> fieldAnnotations(const QString& fieldName) const override {
<%call field_annotation_logic%>
        return QList<QSharedPointer<IAnnotation>>();
    }
    
    QString description() const override {
        return "<%=escape_string(declaration.name)%>";
    }
    
    QString fieldDescription(const QString& fieldName) const override {
<%call field_description_logic%>
        return QString();
    }
    
    QVariant value(const QString& fieldName) const override {
<%call value_getter_logic%>
    }
    
    void value(const QString& fieldName, const QVariant& value) override {
<%call value_setter_logic%>
    }
    
    // 特定于<%=declaration.name%>的访问器
<%call accessors%>
    
protected:
    QString blockName() const override {
        return "<%=declaration.name%>";
    }
    
private:
<%call private_fields%>
};
<%endmisc%>

<%misc enum%>
// <%=declaration.name%>枚举
enum class <%=declaration.class_name%> {
    // TODO: 枚举值
};

// <%=declaration.name%>枚举辅助函数
class <%=declaration.class_name%>Helper {
public:
    static QString toString(<%=declaration.class_name%> value) {
        switch (value) {
            // TODO: 枚举值处理
            default:
                return "Unknown";
        }
    }
    
    static <%=declaration.class_name%> fromString(const QString& str) {
        // TODO: 字符串转枚举
        return static_cast<<%=declaration.class_name%>>(0); // 默认值
    }
    
    static QStringList allValues() {
        return QStringList{
            // TODO: 所有枚举值
        };
    }
};
<%endmisc%>

<%misc annotation_decl%>// <%=declaration.name%>注解
class MODEL_EXPORT <%=declaration.class_name%> : <%call inheritance_declaration%> {
public:
    <%=declaration.class_name%>() = default;
    
    // 实现IAnnotation接口
    QString name() const override {
        return "<%=declaration.name%>";
    }
    
    QVariant argument(const QString& argumentName) const override {<%call annotation_argument_logic%>
        return QVariant();
    }
    
    QStringList argumentNames() const override {
        return QStringList{<%call annotation_argument_names%>};
    }
    
    // 特定于<%=declaration.name%>的访问器
<%call annotation_accessors%>
    
private:
<%call annotation_private_fields%>
};
<%endmisc%> 