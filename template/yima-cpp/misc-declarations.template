<%misc struct%>
// <%=declaration.name%>结构体
class MODEL_EXPORT <%=declaration.class_name%> : <%call inheritance_declaration_struct%> {
public:
    <%=declaration.class_name%>() = default;
    
    // 实现 IModel 接口
    QCborMap toCbor() const override {
        QCborMap map<%if (declaration.parent)%> = <%=declaration.parent_class_name%>::toCbor()<%endif%>;
<%call serialize_fields%>
        return map;
    }
    
    void fromCbor(const QCborMap& map) override {<%if (declaration.parent)%>

        <%=declaration.parent_class_name%>::fromCbor(map);
<%endif%>
<%call deserialize_fields%>
    }
    
    QString name() const override {
        return "<%=declaration.name%>";
    }
    
    QStringList fields() const override {
        return QStringList{<%call field_names%>};
    }
    
    QString fieldType(const QString& fieldName) const override {
<%foreach declaration.fields as field%>
            if (fieldName == QLatin1String("<%=field.name%>")) return QLatin1String("<%=field.type_name%>");
<%endforeach%>
            return QLatin1String("");
    }
    
    QString fieldContainerType(const QString& fieldName) const override {
<%foreach declaration.fields as field%>
            if (fieldName == QLatin1String("<%=field.name%>")) return QLatin1String("<%=field.container_type%>");
<%endforeach%>
            return QLatin1String("none");
    }

    // 特定于<%=declaration.name%>的访问器
<%call accessors%>
    
private:
<%call private_fields%>
};
Q_DECLARE_METATYPE(<%=declaration.class_name%>)
<%endmisc%>

<%misc block%>// <%=declaration.name%>块定义
class MODEL_EXPORT <%=declaration.class_name%> : <%call inheritance_declaration_block%> {
public:
    <%=declaration.class_name%>() = default;
    
    // 实现 IBlock 接口
    virtual QCborMap toCbor() const override {
        QCborMap map<%if (declaration.parent)%> = <%=declaration.parent_class_name%>::toCbor()<%endif%>;
<%call serialize_fields%>
        return map;
    }
    
    virtual void fromCbor(const QCborMap& map) override {<%if (declaration.parent)%>

        <%=declaration.parent_class_name%>::fromCbor(map);

<%endif%>
<%call deserialize_fields%>
    }
    
    virtual QString name() const override {
        return "<%=declaration.name%>";
    }
    
    virtual QStringList fields() const override {
        return QStringList{<%call field_names%>};
    }
    
    virtual QString fieldType(const QString& fieldName) const override {
<%foreach declaration.fields as field%>
            if (fieldName == QLatin1String("<%=field.name%>")) return QLatin1String("<%=field.type_name%>");
<%endforeach%>
            return QLatin1String("");
    }
    
    virtual QString fieldContainerType(const QString& fieldName) const override {
<%foreach declaration.fields as field%>
            if (fieldName == QLatin1String("<%=field.name%>")) return QLatin1String("<%=field.container_type%>");
<%endforeach%>
            return QLatin1String("none");
    }
    
    virtual QList<QSharedPointer<IAnnotation>> annotations() const override {
<%call model_annotation_logic%>
    }
    
    virtual QList<QSharedPointer<IAnnotation>> fieldAnnotation(const QString& fieldName) const override {
<%call field_annotation_logic%>
        return QList<QSharedPointer<IAnnotation>>();
    }
    
    virtual QString description() const override {
        return "<%=escape_string(declaration.name)%>";
    }
    
    virtual QString fieldDescription(const QString& fieldName) const override {
<%call field_description_logic%>
        return QString();
    }
    
    virtual QVariant value(const QString& fieldName) const override {
<%call value_getter_logic%>
    }
    
    virtual void value(const QString& fieldName, const QVariant& value) override {
<%call value_setter_logic%>
    }
    
    // 特定于<%=declaration.name%>的访问器
<%call accessors%>
    
private:
<%call private_fields%>
};
Q_DECLARE_METATYPE(<%=declaration.class_name%>)
<%endmisc%>

<%misc enum%>
// <%=declaration.name%>枚举
enum class <%=declaration.class_name%> {
    // TODO: 枚举值
};

// <%=declaration.name%>枚举辅助函数
class <%=declaration.class_name%>Helper {
public:
    static QString toString(<%=declaration.class_name%> value) {
        switch (value) {
            // TODO: 枚举值处理
            default:
                return "Unknown";
        }
    }
    
    static <%=declaration.class_name%> fromString(const QString& str) {
        // TODO: 字符串转枚举
        return static_cast<<%=declaration.class_name%>>(0); // 默认值
    }
    
    static QStringList allValues() {
        return QStringList{
            // TODO: 所有枚举值
        };
    }
};
<%endmisc%>

<%misc annotation_decl%>// <%=declaration.name%>注解
class MODEL_EXPORT <%=declaration.class_name%> : <%call inheritance_declaration_annotation%> {
public:
    <%=declaration.class_name%>() = default;
    
    // 实现IAnnotation接口
    QString name() const override {
        return "<%=declaration.name%>";
    }
    
    QVariant argument(const QString& argumentName) const override {<%call annotation_argument_logic%>
        return QVariant();
    }
    
    QStringList argumentNames() const override {
        return QStringList{<%call annotation_argument_names%>};
    }
    
    // 特定于<%=declaration.name%>的访问器
<%call annotation_accessors%>
private:<%call annotation_private_fields%>
};
Q_DECLARE_METATYPE(<%=declaration.class_name%>)<%endmisc%> 