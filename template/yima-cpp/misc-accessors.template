<%misc private_fields%>

<%endmisc%>

<%misc getter_method%>
<%endmisc%>

<%misc setter_method%>
<%endmisc%>

<%misc accessors%>
<%endmisc%>

<%misc field_type_logic%>
<%endmisc%>

<%misc field_container_type_logic%>
<%endmisc%>

<%misc model_annotation_logic%>
<%endmisc%>

<%misc field_annotation_logic%>
<%foreach declaration.fields as field%>
        if (fieldName == QLatin1String("<%=field.name%>")) {
            QList<QSharedPointer<IAnnotation>> result;
<%foreach field.annotations as annotation%>
            result.append(QSharedPointer<IAnnotation>(new <%=annotation.relative_class_name%>()));
<%endforeach%>
            return result;
        }
<%endforeach%>
        return QList<QSharedPointer<IAnnotation>>();
<%endmisc%>

<%misc field_description_logic%>
<%foreach declaration.fields as field%>
        if (fieldName == QLatin1String("<%=field.name%>")) {
            return QLatin1String("<%=field.name%>");
        }
<%endforeach%>
        return QString();
<%endmisc%>

<%misc value_getter_logic%>
<%foreach declaration.fields as field%>
        if (fieldName == QLatin1String("<%=field.name%>")) return QVariant::fromValue(get<%=pascal_case(field.name)%>());
<%endforeach%>
        return QVariant();
<%endmisc%>

<%misc value_setter_logic%>
<%endmisc%>

<%misc pascal_case%>
<%=pascal_case(STRING_VALUE)%>
<%endmisc%>

<%misc repeat%>
<%=repeat(STRING_VALUE, COUNT)%>
<%endmisc%> 