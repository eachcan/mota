<%misc private_fields%>
<%foreach declaration.fields as field%>
 <%=repeat(" ", 4)%><%if (field.container_type == "array")%>QVector<<%=field.relative_mapped_type_name%>><%else%><%if (field.container_type == "map")%>QMap<QString, <%=field.relative_mapped_type_name%>><%else%><%=field.relative_mapped_type_name%><%endif%><%endif%> <%=field.field_name%>_<%if (field.default_value)%> = <%=field.default_value%><%endif%>;
<%endforeach%>
<%endmisc%>

<%misc field_names%><%foreach declaration.fields as field%>QLatin1String("<%=field.name%>")<%if (is_last == false)%>, <%endif%><%endforeach%><%endmisc%>

<%misc getter_method%>
<%=repeat(" ", 4)%><%if (field.container_type == "array")%>QVector<<%=field.relative_mapped_type_name%>><%else%><%if (field.container_type == "map")%>QMap<QString, <%=field.relative_mapped_type_name%>><%else%><%=field.relative_mapped_type_name%><%endif%><%endif%> get<%=pascal_case(field.name)%>() const {
        return <%=field.field_name%>_;
    }
<%endmisc%>

<%misc setter_method%>
    void set<%=pascal_case(field.name)%>(const <%if (field.container_type == "array")%>QVector<<%=field.relative_mapped_type_name%>><%else%><%if (field.container_type == "map")%>QMap<QString, <%=field.relative_mapped_type_name%>><%else%><%=field.relative_mapped_type_name%><%endif%><%endif%>& value) {
        <%=field.field_name%>_ = value;
    }
<%endmisc%>

<%misc accessors%>
<%foreach declaration.fields as field%>
<%call getter_method%>

<%call setter_method%>
<%endforeach%>
<%endmisc%>

<%misc field_type_logic%>
<%foreach declaration.fields as field%>
        if (fieldName == QLatin1String("<%=field.name%>")) return QLatin1String("<%=field.relative_type_name%>");
<%endforeach%>
        return QLatin1String("");
<%endmisc%>

<%misc model_annotation_logic%>
        QList<QSharedPointer<IAnnotation>> result;
<%foreach declaration.annotations as annotation%>
        result.append(QSharedPointer<IAnnotation>(new <%=annotation.relative_class_name%>()));
<%endforeach%>
        return result;
<%endmisc%>

<%misc field_annotation_logic%>
<%foreach declaration.fields as field%>
        if (fieldName == QLatin1String("<%=field.name%>")) {
            QList<QSharedPointer<IAnnotation>> result;
<%foreach field.annotations as annotation%>
            result.append(QSharedPointer<IAnnotation>(new <%=annotation.relative_class_name%>()));
<%endforeach%>
            return result;
        }
<%endforeach%>
<%endmisc%>

<%misc field_description_logic%>
<%foreach declaration.fields as field%>
        if (fieldName == QLatin1String("<%=field.name%>")) {
            return "<%=escape_string(field.name)%>";
        }
<%endforeach%>
<%endmisc%>

<%misc value_getter_logic%>
<%foreach declaration.fields as field%>
        if (fieldName == QLatin1String("<%=field.name%>")) return QVariant::fromValue(<%=field.field_name%>_);
<%endforeach%>
        return QVariant();
<%endmisc%>

<%misc value_setter_logic%>
<%foreach declaration.fields as field%>
        if (fieldName == QLatin1String("<%=field.name%>")) {
            <%=field.field_name%>_ = value.value<<%if (field.container_type == "array")%>QVector<<%=field.relative_mapped_type_name%>><%else%><%if (field.container_type == "map")%>QMap<QString, <%=field.relative_mapped_type_name%>><%else%><%=field.relative_mapped_type_name%><%endif%><%endif%>>();
            return;
        }
<%endforeach%>
<%endmisc%>

<%misc pascal_case%><%=pascal_case(STRING_VALUE)%><%endmisc%>

<%misc repeat%><%=repeat(STRING_VALUE, COUNT)%><%endmisc%> 