<%misc serialize_array%>
        QCborArray __<%=field.name%>Array;
        for (const auto& item : get<%=pascal_case(field.name)%>()) {
<%if (is_base_type(field.type_name))%>
            __<%=field.name%>Array.append(QCborValue(item));
<%else%>
            __<%=field.name%>Array.append(item.toCbor());
<%endif%>
        }
        map.insert(QLatin1String("<%=field.name%>"), __<%=field.name%>Array);
<%endmisc%>

<%misc serialize_map%>
        QCborMap __<%=field.name%>Map;
        auto __<%=field.name%>Val = get<%=pascal_case(field.name)%>();
        for (auto it = __<%=field.name%>Val.cbegin(); it != __<%=field.name%>Val.cend(); ++it) {
<%if (is_base_type(field.type_name))%>
            __<%=field.name%>Map.insert(it.key(), QCborValue(it.value()));
<%else%>
            __<%=field.name%>Map.insert(it.key(), it.value().toCbor());
<%endif%>
        }
        map.insert(QLatin1String("<%=field.name%>"), __<%=field.name%>Map);
<%endmisc%>

<%misc serialize_fields%>
<%foreach declaration.fields as field%>
                <%if (field.container_type == "array")%>
                        <%call serialize_array%>
                <%endif%>
                <%if (field.container_type == "map")%>
                        <%call serialize_map%>
                <%endif%>
                <%if (field.container_type == "none")%>
<%if (is_base_type(field.type_name))%>
        map.insert(QLatin1String("<%=field.name%>"), QCborValue(get<%=pascal_case(field.name)%>()));
<%else%>
            map.insert(QLatin1String("<%=field.name%>"), get<%=pascal_case(field.name)%>().toCbor());
<%endif%>
                <%endif%>
                <%if (field.container_type == "optional")%>
                        <%if (is_base_type(field.type_name))%>
        if (get<%=pascal_case(field.name)%>()) {
            map.insert(QLatin1String("<%=field.name%>"), QCborValue(get<%=pascal_case(field.name)%>()));
        }<%else%>
        if (get<%=pascal_case(field.name)%>()) {
            map.insert(QLatin1String("<%=field.name%>"), get<%=pascal_case(field.name)%>()->toCbor());
        }<%endif%>
                <%endif%>
        <%endforeach%>
<%endmisc%>

<%misc deserialize_array%>
        __tmp_value = map.value(QLatin1String("<%=field.name%>"));
        if (!__tmp_value.isNull() && !__tmp_value.isUndefined() && !__tmp_value.isInvalid() && __tmp_value.isArray()) {
            QCborArray __<%=field.name%>Array = __tmp_value.toArray();
            QVector<<%=map_type(field.type_name)%>> <%=field.name%>;
            for (const auto& __tmp_value : __<%=field.name%>Array) {
                <%=map_type(field.type_name)%> __itemValue;
                if (!__tmp_value.isNull() && !__tmp_value.isUndefined() && !__tmp_value.isInvalid()) {
<%if (is_base_type(field.type_name))%>
                    __itemValue = <%call deserialize_item%>;
                    <%=field.name%>.append(__itemValue);
<%else%>
                    __itemValue.fromCbor(__tmp_value.toMap());
                    <%=field.name%>.append(__itemValue);
<%endif%>
                }
            }
            set<%=pascal_case(field.name)%>(<%=field.name%>);
        }
<%endmisc%>

<%misc deserialize_map%>
        __tmp_value = map.value(QLatin1String("<%=field.name%>"));
        if (!__tmp_value.isNull() && !__tmp_value.isUndefined() && !__tmp_value.isInvalid() && __tmp_value.isMap()) {
            QCborMap __<%=field.name%>Map = __tmp_value.toMap();
            QMap<QString, <%=map_type(field.type_name)%>> __<%=field.name%>Val;
            for (const auto& __iter : __<%=field.name%>Map) {
                __tmp_value = __iter.second;
                <%=map_type(field.type_name)%> __itemValue;
                if (!__tmp_value.isNull() && !__tmp_value.isUndefined() || !__tmp_value.isInvalid()) {
<%if (is_base_type(field.type_name))%>
                    __itemValue = <%call deserialize_item%>;
                    __<%=field.name%>Val.insert(__iter.first.toString(), __itemValue);
<%else%>
                    __itemValue.fromCbor(__tmp_value.toMap());
                    __<%=field.name%>Val.insert(__iter.first.toString(), __itemValue);
<%endif%>
                }
            }
            set<%=pascal_case(field.name)%>(__<%=field.name%>Val);
        }
<%endmisc%>

<%misc deserialize_item%>
<%if (is_base_type(field.type_name))%>
<%if (field.type_name == "int8")%>
__tmp_value.toInteger()<%endif%>
<%if (field.type_name == "int16")%>
__tmp_value.toInteger()<%endif%>
<%if (field.type_name == "int32")%>
__tmp_value.toInteger()<%endif%>
<%if (field.type_name == "int64")%>
__tmp_value.toInteger()<%endif%>
<%if (field.type_name == "uint8")%>
__tmp_value.toInteger()<%endif%>
<%if (field.type_name == "uint16")%>
__tmp_value.toInteger()<%endif%>
<%if (field.type_name == "uint32")%>
__tmp_value.toInteger()<%endif%>
<%if (field.type_name == "uint64")%>
__tmp_value.toInteger()<%endif%>
<%if (field.type_name == "float32")%>
__tmp_value.toDouble()<%endif%>
<%if (field.type_name == "float64")%>
__tmp_value.toDouble()<%endif%>
<%if (field.type_name == "string")%>
__tmp_value.toString()<%endif%>
<%if (field.type_name == "bool")%>
__tmp_value.toBool()<%endif%>
<%if (field.type_name == "bytes")%>
__tmp_value.toByteArray()<%endif%>
<%else%>__tmp_value.toMap()<%endif%>
<%endmisc%>

<%misc deserialize_single%>
        __tmp_value = map.value(QLatin1String("<%=field.name%>"));
        if (!__tmp_value.isNull() && !__tmp_value.isUndefined() && !__tmp_value.isInvalid()) {
<%if (is_base_type(field.type_name))%>
<%if (field.type_name == "int8")%>
            set<%=pascal_case(field.name)%>(__tmp_value.toInteger());
<%endif%>
<%if (field.type_name == "int16")%>
            set<%=pascal_case(field.name)%>(__tmp_value.toInteger());
<%endif%>
<%if (field.type_name == "int32")%>
            set<%=pascal_case(field.name)%>(__tmp_value.toInteger());
<%endif%>
<%if (field.type_name == "int64")%>
            set<%=pascal_case(field.name)%>(__tmp_value.toInteger());
<%endif%>
<%if (field.type_name == "uint8")%>
            set<%=pascal_case(field.name)%>(__tmp_value.toInteger());
<%endif%>
<%if (field.type_name == "uint16")%>
            set<%=pascal_case(field.name)%>(__tmp_value.toInteger());
<%endif%>
<%if (field.type_name == "uint32")%>
            set<%=pascal_case(field.name)%>(__tmp_value.toInteger());
<%endif%>
<%if (field.type_name == "uint64")%>
            set<%=pascal_case(field.name)%>(__tmp_value.toInteger());
<%endif%>
<%if (field.type_name == "float32")%>
            set<%=pascal_case(field.name)%>(__tmp_value.toDouble());
<%endif%>
<%if (field.type_name == "float64")%>
            set<%=pascal_case(field.name)%>(__tmp_value.toDouble());
<%endif%>
<%if (field.type_name == "string")%>
            set<%=pascal_case(field.name)%>(__tmp_value.toString());
<%endif%>
<%if (field.type_name == "bool")%>
            set<%=pascal_case(field.name)%>(__tmp_value.toBool());
<%endif%>
<%if (field.type_name == "bytes")%>
            set<%=pascal_case(field.name)%>(__tmp_value.toByteArray());
<%endif%>
<%else%>
            <%=map_type(field.type_name)%> __itemValue;
            __itemValue.fromCbor(__tmp_value.toMap());
            set<%=pascal_case(field.name)%>(__itemValue);
<%endif%>
        }
<%endmisc%>


<%misc deserialize_fields%>

        QCborValue __tmp_value;
<%foreach declaration.fields as field%>
        <%if (field.container_type == "array")%>
                <%call deserialize_array%>
        <%endif%>
        <%if (field.container_type == "map")%>
                <%call deserialize_map%>
        <%endif%>
        <%if (field.container_type == "none")%>
                <%call deserialize_single%>
        <%endif%>
        <%if (field.container_type == "optional")%>
                <%call deserialize_single%>
        <%endif%>
<%endforeach%>
<%endmisc%> 