<%misc serialize_int%>
        map.insert(QLatin1String("<%=field.name%>"), QCborValue(get<%=pascal_case(field.name)%>()));
<%endmisc%>

<%misc serialize_float%>
        map.insert(QLatin1String("<%=field.name%>"), QCborValue(get<%=pascal_case(field.name)%>()));
<%endmisc%>

<%misc serialize_string%>
        map.insert(QLatin1String("<%=field.name%>"), QCborValue(get<%=pascal_case(field.name)%>()));
<%endmisc%>

<%misc serialize_bool%>
        map.insert(QLatin1String("<%=field.name%>"), QCborValue(get<%=pascal_case(field.name)%>()));
<%endmisc%>

<%misc serialize_bytes%>
        map.insert(QLatin1String("<%=field.name%>"), QCborValue(get<%=pascal_case(field.name)%>()));
<%endmisc%>

<%misc serialize_array%>
        QCborArray <%=field.name%>Array;
        for (const auto& item : get<%=pascal_case(field.name)%>()) {
            <%=field.name%>Array.append(item.toCbor());
        }
        map.insert(QLatin1String("<%=field.name%>"), <%=field.name%>Array);
<%endmisc%>

<%misc serialize_complex%>
        map.insert(QLatin1String("<%=field.name%>"), get<%=pascal_case(field.name)%>().toCbor());
<%endmisc%>

<%misc deserialize_int%>
        set<%=pascal_case(field.name)%>(static_cast<<%=map_type(field.type_name)%>>(map.value(QLatin1String("<%=field.name%>")).toInteger()));
<%endmisc%>

<%misc deserialize_float%>
        set<%=pascal_case(field.name)%>(static_cast<<%=map_type(field.type_name)%>>(map.value(QLatin1String("<%=field.name%>")).toDouble()));
<%endmisc%>

<%misc deserialize_string%>
        set<%=pascal_case(field.name)%>(map.value(QLatin1String("<%=field.name%>")).toString());
<%endmisc%>

<%misc deserialize_bool%>
        set<%=pascal_case(field.name)%>(map.value(QLatin1String("<%=field.name%>")).toBool());
<%endmisc%>

<%misc deserialize_bytes%>
        set<%=pascal_case(field.name)%>(map.value(QLatin1String("<%=field.name%>")).toByteArray());
<%endmisc%>

<%misc deserialize_array%>
        QCborArray <%=field.name%>Array = map.value(QLatin1String("<%=field.name%>")).toArray();
        QVector<<%=map_type(field.type_name)%>> <%=field.name%>;
        for (const auto& itemValue : <%=field.name%>Array) {
            <%=map_type(field.type_name)%> item;
            item.fromCbor(itemValue);
            <%=field.name%>.append(item);
        }
        set<%=pascal_case(field.name)%>(<%=field.name%>);
<%endmisc%>

<%misc deserialize_complex%>
        <%=map_type(field.type_name)%> <%=field.name%>;
        <%=field.name%>.fromCbor(map.value(QLatin1String("<%=field.name%>")));
        set<%=pascal_case(field.name)%>(<%=field.name%>);
<%endmisc%>

<%misc serialize_fields%>
<%foreach declaration.fields as field%><%if (field.container_type == "array")%><%call serialize_array%><%else%><%if (field.type_name == "int8" || field.type_name == "int16" || field.type_name == "int32" || field.type_name == "int64" || field.type_name == "uint8" || field.type_name == "uint16" || field.type_name == "uint32" || field.type_name == "uint64")%><%call serialize_int%><%else%><%if (field.type_name == "float32" || field.type_name == "float64")%><%call serialize_float%><%else%><%if (field.type_name == "string")%><%call serialize_string%><%else%><%if (field.type_name == "bool")%><%call serialize_bool%><%else%><%if (field.type_name == "bytes")%><%call serialize_bytes%><%else%><%call serialize_complex%><%endif%><%endif%><%endif%><%endif%><%endif%><%endforeach%><%endmisc%>

<%misc deserialize_fields%>
<%foreach declaration.fields as field%><%if (field.container_type == "array")%><%call deserialize_array%><%else%><%if (field.type_name == "int8" || field.type_name == "int16" || field.type_name == "int32" || field.type_name == "int64" || field.type_name == "uint8" || field.type_name == "uint16" || field.type_name == "uint32" || field.type_name == "uint64")%><%call deserialize_int%><%else%><%if (field.type_name == "float32" || field.type_name == "float64")%><%call deserialize_float%><%else%><%if (field.type_name == "string")%><%call deserialize_string%><%else%><%if (field.type_name == "bool")%><%call deserialize_bool%><%else%><%if (field.type_name == "bytes")%><%call deserialize_bytes%><%else%><%call deserialize_complex%><%endif%><%endif%><%endif%><%endif%><%endif%><%endforeach%><%endmisc%> 