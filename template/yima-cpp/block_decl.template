// <%=BLOCK_NAME%>块
class MODEL_EXPORT <%call class_name%> : <%call inheritance_declaration%> {
public:
    <%call class_name%>() = default;
    <%call constructor%>
    
    // 实现<%call interface_name%>接口
    QCborValue toCbor() const override {
        QCborMap map;
<%call serialize_fields%>
        return map;
    }
    
    void fromCbor(const QCborValue& cbor) override {
        QCborMap map = cbor.toMap();
<%call deserialize_fields%>
    }
    
    QString name() const override {
        return "<%=BLOCK_NAME%>";
    }
    
    QStringList fields() const override {
        return QStringList{<%call field_names%>};
    }
    
    QString fieldType(const QString& fieldName) const override {
<%call field_type_logic%>
    }
    
    QList<QSharedPointer<IAnnotation>> annotations() const override {
<%call block_annotation_logic%>
    }
    
    QList<QSharedPointer<void>> fieldAnnotation(const QString& fieldName) const override {
<%call field_annotation_logic%>
        return QList<QSharedPointer<void>>();
    }
    
    QString description() const override {
        return "<%=escape_string(DESCRIPTION)%>";
    }
    
    QString fieldDescription(const QString& fieldName) const override {
<%call field_description_logic%>
        return QString();
    }
    
    QVariant value(const QString& fieldName) const override {
<%call value_getter_logic%>
    }
    
    void value(const QString& fieldName, const QVariant& value) override {
<%call value_setter_logic%>
    }
    
    // 特定于<%=BLOCK_NAME%>的访问器
<%call accessors%>
    
private:
<%call private_fields%>
}; 