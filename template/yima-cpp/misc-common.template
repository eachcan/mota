<%misc private_field_suffix%>_<%endmisc%>

<%misc empty_variant%>QVariant()<%endmisc%>

<%misc repeated_keyword%>repeated<%endmisc%>

<%misc namespace_path_separator%>/<%endmisc%>

<%misc namespace_separator_replacement%>.->::<%endmisc%>

<%misc argument_name_variable%>argumentName<%endmisc%>

<%misc field_name_variable%>fieldName<%endmisc%>

<%misc enum_value_separator%>,
    <%endmisc%>

<%misc enum_case_separator%>
            <%endmisc%>

<%misc enum_condition_separator%> else <%endmisc%>

<%misc enum_string_value_separator%> <%endmisc%>

<%misc enum_display_name_separator%> <%endmisc%>

<%misc enum_annotation_case_separator%>
            <%endmisc%>

<%misc enum_annotation_condition_separator%> else <%endmisc%>

<%misc enum_value_annotation_names%>yima.EnumValue|EnumValue<%endmisc%>

<%misc desc_param_name%>desc<%endmisc%>

<%misc container_template%>QVector<<%=ELEMENT_TYPE%>><%endmisc%>

<%misc string_literal_template%>QLatin1String("<%=escape_string(STRING_VALUE)%>")<%endmisc%>

<%misc variant_template%>QVariant::fromValue(<%=VALUE%>)<%endmisc%>

<%misc collection_separator%>|<%endmisc%>

<%misc type_suffix%><%if (declaration.type == "block")%>Block<%endif%><%if (declaration.type == "struct")%>Model<%endif%><%if (declaration.type == "enum")%><%endif%><%if (declaration.type == "annotation")%>Annotation<%endif%><%endmisc%>

<%misc interface_name%><%if (declaration.type == "block")%>IBlock<%endif%><%if (declaration.type == "struct")%>IModel<%endif%><%if (declaration.type == "annotation_decl")%>IAnnotation<%endif%><%endmisc%>

<%misc inheritance_declaration%><%if (declaration.parent)%>public <%=declaration.parent_class_name%>, <%endif%>public <%call interface_name%><%endmisc%>
<%misc inheritance_declaration_annotation%><%if (declaration.parent)%>public <%=declaration.parent_class_name%><%else%>public IAnnotation<%endif%><%endmisc%>
<%misc inheritance_declaration_block%><%if (declaration.parent)%>public <%=declaration.parent_class_name%><%else%>public IBlock<%endif%><%endmisc%>
<%misc inheritance_declaration_struct%><%if (declaration.parent)%>public <%=declaration.parent_class_name%>, <%endif%>public IModel<%endmisc%>

<%misc capitalize%><%=first_char_upper(field_name)%><%endmisc%>

<%misc escape_string%><%=escape_string(STRING_VALUE)%><%endmisc%>

<%misc field_type%>
    <%if (field.container_type == "array")%>
QVector<<%=map_type(field.type_name)%>><%else%>
        <%if field.container_type == "map"%>
QMap<QString, <%=map_type(field.type_name)%>><%else%>
<%=map_type(field.type_name)%><%endif%>
    <%endif%>
<%endmisc%>

<%misc annotation_constructor%><%endmisc%>

<%misc annotation_argument_logic%><%foreach declaration.fields as field%>
        if (argumentName == QLatin1String("<%=field.name%>")) return QVariant::fromValue(<%=field.field_name%><%call private_field_suffix%>);<%endforeach%><%endmisc%>

<%misc annotation_argument_names%><%foreach declaration.fields as field%>QLatin1String("<%=field.name%>")<%if (is_last == false)%>, <%endif%><%endforeach%><%endmisc%>

<%misc annotation_accessors%><%foreach declaration.fields as field%>    // <%=field.name%>字段的访问器
    <%call field_type%> get<%=pascal_case(field.name)%>() const {
        return <%=field.field_name%><%call private_field_suffix%>;
    }
    
    void set<%=pascal_case(field.name)%>(const <%call field_type%>& value) {
        <%=field.field_name%><%call private_field_suffix%> = value;
    } 
<%endforeach%><%endmisc%>

<%misc annotation_private_fields%><%foreach declaration.fields as field%>
    <%call field_type%> <%=field.field_name%><%call private_field_suffix%>;<%endforeach%><%endmisc%> 