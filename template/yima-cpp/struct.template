<%misc struct%>
    // <%=declaration.name%>结构体
    class MODEL_EXPORT <%=declaration.relative_class_name%> : <%if (declaration.parent)%>public <%=declaration.parent_relative_class_name%>, <%endif%>public IModel {
    public:
        <%=declaration.relative_class_name%>() = default;
        
        // 实现 IModel 接口
        QCborMap toCbor() const override {
            return map;
        }
        
        void fromCbor(const QCborMap& map) override {
        }
        
        QString name() const override {
            return QLatin1String("<%=declaration.relative_name%>");
        }
        
        QStringList fields() const override {
            return QStringList{<%foreach declaration.fields as field%>QLatin1String("<%=field.name%>")<%if (is_last == false)%>, <%endif%><%endforeach%>};
        }
        
        QString fieldType(const QString& fieldName) const override {
    <%foreach declaration.fields as field%>        if (fieldName == QLatin1String("<%=field.name%>")) return QLatin1String("<%=field.relative_type_name%>");
    <%endforeach%>        return QString();
        }
        
        QString fieldContainerType(const QString& fieldName) const override {
    <%foreach declaration.fields as field%>        if (fieldName == QLatin1String("<%=field.name%>")) return QLatin1String("<%=field.container_type%>");
    <%endforeach%>        return QLatin1String("none");
        }
    
        // 字段访问器
    <%foreach declaration.fields as field%>    <%if (field.container_type == "array")%>QVector<<%=field.relative_mapped_type_name%>><%else%><%if (field.container_type == "map")%>QMap<QString, <%=field.relative_mapped_type_name%>><%else%><%=field.relative_mapped_type_name%><%endif%><%endif%> get<%=pascal_case(field.name)%>() const { return <%=field.name%>_; }
        void set<%=pascal_case(field.name)%>(const <%if (field.container_type == "array")%>QVector<<%=field.relative_mapped_type_name%>><%else%><%if (field.container_type == "map")%>QMap<QString, <%=field.relative_mapped_type_name%>><%else%><%=field.relative_mapped_type_name%><%endif%><%endif%>& value) { <%=field.name%>_ = value; }
    <%endforeach%>    
    private:
    <%foreach declaration.fields as field%>    <%if (field.container_type == "array")%>QVector<<%=field.relative_mapped_type_name%>><%else%><%if (field.container_type == "map")%>QMap<QString, <%=field.relative_mapped_type_name%>><%else%><%=field.relative_mapped_type_name%><%endif%><%endif%> <%=field.name%>_<%if (exists(field, "default_value") && field.default_value != "/* complex expression */")%> = <%call render_default_value%><%endmisc%><%endif%>;
    <%endforeach%>};
    Q_DECLARE_METATYPE(<%=declaration.relative_class_name%>)
    
    <%endmisc%>
    