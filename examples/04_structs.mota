// 结构体语法完整示例
namespace examples.structs;

include "yima.mota";

// === 基础注解定义 ===
annotation StructAnnotation {
    string description = "";
}

annotation StructValueAnnotation {
    string value;
}

annotation StructConfigAnnotation : StructAnnotation {
    bool required = false;
    int32 priority = 1;
}

// === 枚举定义 ===
enum StructStatus {
    DRAFT = 1;
    PUBLISHED = 2;
    ARCHIVED = 3;
}

enum StructCategory {
    BASIC;
    ADVANCED;
    PREMIUM;
}

// === 块定义 ===
block StructBaseBlock {
    int32 id = 0;
    string name = "";
}

block StructExtendedBlock : StructBaseBlock {
    bool enabled = true;
    StructStatus status = DRAFT;
}

// === 基础结构体 ===
struct BasicStruct {
    int32 id = 0;
    string name = "";
}

// === 继承block的结构体 ===
struct InheritedStruct : StructBaseBlock {
    @StructAnnotation(description = "分数字段")
    float64 score = 0.0;
    @StructValueAnnotation("category_field")
    StructCategory category = BASIC;
}

// === 使用注解的结构体 ===
@StructValueAnnotation("main_config")
@StructConfigAnnotation(
    description = "主配置结构",
    required = true,
    priority = 10
)
struct AnnotatedStruct {
    @StructValueAnnotation("title_field")
    string title = "";
    @StructAnnotation(description = "优先级字段")
    int32 priority = 1;
}

// === 全字段类型测试结构体 ===
struct AllTypesStruct {
    // 所有基础类型
    @StructValueAnnotation("int8_field")
    int8 int8Field = 1;
    @StructAnnotation(description = "16位整数字段")
    int16 int16Field = 2;
    @StructConfigAnnotation(
        description = "32位整数字段",
        required = true,
        priority = 5
    )
    int32 int32Field = 3;
    int64 int64Field = 4;
    uint8 uint8Field = 5;
    uint16 uint16Field = 6;
    uint32 uint32Field = 7;
    uint64 uint64Field = 8;
    @StructAnnotation(description = "32位浮点数")
    float32 float32Field = 1.0;
    @StructValueAnnotation("double_field")
    float64 float64Field = 2.0;
    bool boolField = true;
    @StructAnnotation(description = "字符串字段")
    string stringField = "test";
    bytes bytesField = "data";
    
    // 枚举类型
    @StructValueAnnotation("status_field")
    StructStatus status = PUBLISHED;
    @StructConfigAnnotation(
        description = "类别字段",
        required = false,
        priority = 3
    )
    StructCategory category = ADVANCED;
    
    // 块类型
    @StructAnnotation(description = "基础块字段")
    StructBaseBlock baseBlock;
    StructExtendedBlock extendedBlock;
}

// === 容器类型测试结构体 ===
struct ContainerStruct {
    // repeated容器
    @StructAnnotation(description = "整数数组")
    repeated int32 intArray = [1, 2, 3];
    @StructValueAnnotation("string_array")
    repeated string stringArray;
    @StructConfigAnnotation(
        description = "状态数组",
        required = true,
        priority = 7
    )
    repeated StructStatus statusArray = [DRAFT, PUBLISHED];
    repeated StructCategory categoryArray;
    @StructAnnotation(description = "块数组")
    repeated StructBaseBlock blockArray;
    
    // optional容器
    @StructValueAnnotation("optional_int")
    optional int32 optionalInt = 42;
    optional string optionalString;
    @StructAnnotation(description = "可选状态")
    optional StructStatus optionalStatus;
    optional StructCategory optionalCategory = PREMIUM;
    @StructValueAnnotation("optional_block")
    optional StructBaseBlock optionalBlock;
    
    // map容器
    @StructAnnotation(description = "整数映射")
    map int32 intMap;
    map string stringMap;
    @StructValueAnnotation("status_map")
    map StructStatus statusMap;
    map StructCategory categoryMap;
    @StructAnnotation(description = "块映射")
    map StructBaseBlock blockMap;
}

// === 综合测试结构体 ===
struct ComprehensiveStruct {
    // 基础字段
    @StructValueAnnotation("struct_name")
    string name = "综合测试";
    @StructConfigAnnotation(
        description = "状态字段",
        required = true,
        priority = 9
    )
    StructStatus status = DRAFT;
    
    // 块字段
    @StructAnnotation(description = "基础块字段")
    StructBaseBlock baseBlock;
    @StructValueAnnotation("extended_block")
    StructExtendedBlock extendedBlock;
    
    // 容器字段
    @StructConfigAnnotation(
        description = "块列表",
        required = false,
        priority = 2
    )
    repeated StructBaseBlock blockList;
    @StructValueAnnotation("optional_category")
    optional StructCategory optionalCategory;
    @StructAnnotation(description = "配置映射")
    map string configMap;
} 