// 验证规则示例
namespace examples.validation;

// 引入标准注解库
include "yima.mota";

// 基本表单验证
@yima.Window(title = "表单验证")
struct ValidatedForm {
    // 用户名（必填）
    @yima.Text(desc = "用户名", pattern = ".+")
    string username = "";
    
    // 密码（长度验证）
    @yima.Text(desc = "密码", pattern = ".{6,20}")
    string password = "";
    
    // 手机号（正则表达式验证）
    @yima.Text(desc = "手机号码", pattern = "^1[3-9]\\d{9}$")
    string phone = "";
    
    // 邮箱（邮箱格式验证）
    @yima.Text(desc = "邮箱地址", pattern = "^[\\w.-]+@[\\w.-]+\\.[a-zA-Z]{2,}$")
    string email = "";
    
    // 年龄（数字范围验证）
    @yima.Int(desc = "年龄", min = 0, max = 150)
    int32 age = 25;
    
    // 网站（URL验证）
    @yima.Text(desc = "网站地址", pattern = "^https?://.*")
    string website = "";
    
    // 确认密码
    @yima.Text(desc = "确认密码", pattern = ".{6,20}")
    string confirmPassword = "";
}

// 条件验证示例
@yima.Window(title = "条件验证")
struct ConditionalValidation {
    // 需要送货地址开关
    @yima.Switcher(desc = "需要送货地址")
    bool needsShipping = false;
    
    // 国家/地区选择
    @yima.Text(desc = "国家/地区代码")
    string country = "us";
    
    // 收货地址
    @yima.Text(desc = "收货地址")
    optional string shippingAddress;
    
    // 邮政编码
    @yima.Text(desc = "邮政编码", pattern = "^\\d{5}(-\\d{4})?$")
    optional string zipCode;
}

// 复杂验证表单
@yima.Window(title = "复杂验证")
struct AdvancedValidation {
    // 信用卡号码
    @yima.Text(desc = "信用卡号码", pattern = "^[0-9]{16}$")
    string creditCardNumber = "";
    
    // 过期日期
    @yima.Text(desc = "过期日期 (MM/YY)", pattern = "^(0[1-9]|1[0-2])/[0-9]{2}$")
    string expiryDate = "";
    
    // CVV码
    @yima.Text(desc = "CVV码", pattern = "^[0-9]{3,4}$")
    string cvv = "";
    
    // 持卡人姓名
    @yima.Text(desc = "持卡人姓名", pattern = ".+")
    string cardholderName = "";
}
